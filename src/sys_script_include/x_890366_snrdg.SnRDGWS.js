/**
 * This Script Include handles the REST calls that come via the API /api/x_890366_snrdg/table_schema/{table}.
 * See Scripted REST API "snRDG Table Schema".
 */
class SnRDGWS {

    /**
     * Converts the exception generated by ServiceNow into a string
     * that can be parsed on the client.
     *
     * @param {any} ex exception object to serialize
     * @returns {string} JSON string of exception object
     */
    static _serializeException(ex) {
        const exObj = {};
        Object.getOwnPropertyNames(ex).forEach((key) => {
            exObj[key] = ex[key];
        });
        // rhinoException is a Java object, so we need to force string conversion
        if ('rhinoException' in ex) {
            exObj.rhinoException = String(ex.rhinoException);
        }
        return JSON.stringify(exObj);
    }

    /**
     * Get the schema for a table.
     * This includes the field name, type, label, default value, reference (where applicable),
     * and choice list (if field is a choice field).
     * 
     * @param {string} table The table name
     * @returns {object[]} The schema
     */
    static _getSchema(table) {
	const tblHierarchy = new GlideTableHierarchy(table); 
	const tableNames = tblHierarchy.getTables();

	const dictGr = new GlideRecord('sys_dictionary');
	dictGr.addQuery('name', 'IN', tableNames);
	dictGr.addQuery('internal_type', '!=', 'collection');
	dictGr.addActiveQuery();
	dictGr.query();

	const fields = ['name', 'internal_type', 'column_label', 'element',
			'default_value', 'reference', 'choice'];

	const records = [];

	while (dictGr.next()) {
	    const record = {};

	    fields.forEach((f) => {
		record[f] = dictGr.getValue(f);
	    });

	    if (dictGr.getValue('choice') != '0') {
		const grTarget = new GlideRecord(record.name); 
		grTarget.initialize();
		record.choices = grTarget[record.element].getChoices();
	    }

	    records.push(record);
	}

	return records;
    }
    

    /**
     * Get the schema for a table.
     * 
     * @param {RESTAPIRequest} request The incoming request
     * @param {RESTAPIResponse} response The response 
     * @modifies response
     */
    static getSchema(request, response) {
	try {
	    const table = request.pathParams.table;
	    const schema = SnRDGWS._getSchema(table);
	    response.setBody(schema);
	} catch (error) {
	    response.setStatus(500);
	    const errorStr = SnRDGWS._serializeException(error);
	    response.setBody(errorStr);
	}
    }
    
    /** @type{String} */
    type = 'SnRDGWS';
}

if (typeof module === 'object') {
    // export as class
    module.exports = SnRDGWS;
} else {
    // servicenow export
    this.SnRDGWS = SnRDGWS;
}

// scroll guard
