#+TITLE:   snRDG
#+OPTIONS: toc:2

Generate Row Data Gateways[1] for ServiceNow Tables.

* Prerequisites
- Node.js (>= 12.x.x)
- npm (>= 6.x.x)
- A ServiceNow instance
- API key for the ServiceNow instance

* Installation

1. Clone the repository:
   #+begin_src sh
   git clone https://github.com/julian-hoch/snRDG.git
   #+end_src

2. Install the dependencies:
   #+begin_src sh
   npm run build && npm install -g
   #+end_src

3. Configure environment variables:

   Create a `.env` file in the root of your project and add the following variables:

   #+begin_src sh
   SNRDG_INSTANCE=<your_instance_name>
   SNRDG_API_KEY=<your_api_key>
   #+end_src

   Replace `<your_instance_name>` with the name of your ServiceNow instance and `<your_api_key>` with your API key.

   *NOTE*: To create an API key, navigate to "System Web Services >> API Access Policies >> REST API Key" (or got directly to table "api_key") in your ServiceNow instance and create a new key.  If you do not have this option, you might have to activate the plugin "API Key and HMAC Authentication" (com.glide.tokenbased_auth).

4. Install the ServiceNow application:

   Import the provided update set XML into your ServiceNow instance.

5. Configure API Key

   Create an API key in your ServiceNow instance and assign it to the REST API[2].

* Usage

The following commands are available to interact with the ServiceNow instance:

** Test Access
Ensure your environment is set up correctly, and you can access your ServiceNow instance.

#+begin_src sh
snrdg test
#+end_src

This will test the connection and confirm the setup.

** *Get Schema*
Retrieve the schema of a specific table in JSON format.

#+begin_src sh
snrdg schema <table_name>
#+end_src

Replace `<table_name>` with the name of your ServiceNow table.

** Generate Row Data Gateway Class
Generate a Row Data Gateway class for a given ServiceNow table.

#+begin_src sh
snrdg generate <table_name> <class_name> [template]
#+end_src

Replace `<table_name>` with the name of your ServiceNow table and `<class_name>` with the desired name for the generated class.

The "template" parameter is optional.  By default, a ES5 JavaScript class will be generated.  There is also a template for an ES6 class available.  You can use that with the template "class_es6".

* Example
Here's an example of how to use the commands:
#+begin_src sh
snrdg test
snrdg schema incident
snrdg generate incident IncidentRDG
#+end_src

Or, to get an ES6 class, and to directly store it in a file (adjust the path to your needs):

#+begin_src sh
snrdg generate incident IncidentRDG ./templates/class_es6 > ./IncidentRDG.js
#+end_src

You can then upload the generated class to your ServiceNow instance and save it as a Script Include to use it in your scripts.

* Architecture
The project consists of three main parts:

** ServiceNow Application
The ServiceNow application is responsible for compiling the metadata of the table and provides a REST API to access the schema information. It is secured via an API key[3].

The installation can be installed using the provided update set XML (directory "app"). The source is also included in this GIT repository for convenience.

See directory =sys_script_include=.

** Client
The client provides a simple CLI to query the instance and generate classes based on the table schema. The client is written in TypeScript and uses the Axios library for HTTP requests. To generate the class, the client uses the Eta template engine.

** Templates
The templates for generating the classes are located in the =/templates= directory. The Eta template engine uses these templates to generate the JavaScript class code based on the table schema.  Feel free to adjust the templates to your own needs, or to add new templates.

* Contributing
Feel free to submit issues or pull requests. Any help is greatly appreciated!

* License
This project is licensed under the GPL-3.0 License. See the LICENSE file for details.

* Authors
Developed by Julian Hoch.

* Footnotes
- [1]: See: [[https://martinfowler.com/eaaCatalog/rowDataGateway.html][P of EAA: Row Data Gateway]]
- [2]: The application includes a dummy API key you can adjust. See [[https://www.servicenow.com/community/developer-advocate-blog/inbound-rest-api-keys/ba-p/2854924][Inbound REST API Keys - ServiceNow Community]] for a detailed guide on how to use API keys in ServiceNow.
- [3]: See: [[https://docs.servicenow.com/bundle/washingtondc-platform-security/page/product/credentials/reference/API-key-credential-form.html][Product Documentation | ServiceNow | API key credentials]]
